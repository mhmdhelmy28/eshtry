openapi: 3.0.0
info:
  title: Eshtry API
  version: 1.0.0
servers:
  - url: http://localhost:3000
  

paths:
  /signup:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                password:
                  type: string
                role:
                  type: string
                storeName:
                  type: string
              required:
                - firstName
                - lastName
                - username
                - password
                - role
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /signin:
    post:
      summary: Authenticate user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
  /addresses:
    post:
      security:
        - Bearer: []
      summary: Create a new address for the authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Address'
      responses:
        '201':
          description: Successfully created a new address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '400':
          description: 'Invalid input'
        '401':
          description: 'User not authrorized'
        '500':
          description: 'Internal server error'
    get:
      security:
        - Bearer: []
      summary: Get all addresses for the authenticated user
      responses:
        '200':
          description: Successfully retrieved user's addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Address'
        '401':
          description: 'User not authorized'
        '500':
          description: 'Internal server error'
  /addresses/{id}:
    get:
      security:
        - Bearer: []
      summary: Get an address by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the address to retrieve
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the address
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Address'
        '401':
          description: 'User not authorized'
        '404':
          description: 'Address not found'
        '500':
          description: 'Internal server error'
    delete:
      security:
        - Bearer: []
      summary: Delete an address by its ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the address to delete
          schema:
            type: integer
      responses:
        '200':
          description: Address deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Address deleted successfully
        '401':
          description: 'User not authorized'
        '404':
          description: 'Address not found'
        '500':
          description: 'Internal server error'
  /cart:
    get:
      security:
        - Bearer: []
      tags:
        - Cart
      summary: Retrieve cart items
      responses:
        "200":
          description: Success
    post:
      security:
        - Bearer: []
      tags:
        - Cart
      summary: Add item to cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  description: The ID of the product to add
                quantity:
                  type: integer
                  description: The quantity of the product to add
      responses:
        "201":
          description: Created
        "400":
          description: Bad request
        "404":
          description: Not found

  /cart/{id}:
    delete:
      security:
        - Bearer: []
      tags:
        - Cart
      summary: Remove item from cart
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the cart item to delete
          schema:
            type: integer
      responses:
        "200":
          description: Success
        "404":
          description: Not found
  /cart/all:
    delete:
      security:
        - Bearer: []
      tags:
        - Cart
      summary: Remove all items from cart
      responses:
        "200":
          description: Success
  /cart/order:
    post:
      security:
        - Bearer: []
      tags:
        - Order
      summary: Order cart items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addresssId:
                  type: integer
                  description: The ID of the Address to order at
 
      responses:
        "200":
          description: Success
        "400":
          description: Bad request
        "404":
          description: Not found
  /categories:
    post:
      security:
        - Bearer: [adminToken]
      tags:
        - "Categories"
      summary: "Create a new category"
      description: "Creates a new category with the given name and description"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Category name
                description:
                  type: string
                  description: Category description
      responses:
        '201':
          description: "Created category"
        '401':
          description: "User not authorized"
        '400':
          description: "Bad request"


 
    get:
      tags:
        - "Categories"
      summary: "Get all categories"
      description: "Returns a list of all categories"
      responses:
        200:
          description: "List of categories"
        500:
          description: "Internal server error"
  /orders:
    post:
      security:
        - Bearer: []
      summary: Creates a new order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                addressId:
                  type: string
                  description: The ID of the shipping address for the order
                cartItems:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: string
                        description: The ID of the product
                      quantity:
                        type: integer
                        description: The quantity of the product
                      price:
                        type: number
                        description: The price of the product
      responses:
        '201':
          description: The created order
        '400':
          description: Bad request
        '500':
          description: Internal server error

    get:
      security:
        - Bearer: []
      summary: Gets all orders for the authenticated user
      responses:
        '200':
          description: The user's orders
        '500':
          description: Internal server error
  /orders/{orderId}:
    get:
      security:
        - Bearer: []
      summary: Gets an order by ID for the authenticated user
      parameters:
        - name: orderId
          in: path
          description: The ID of the order to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The requested order

        '400':
          description: Bad request
        '404':
          description: Order not found
        '500':
          description: Internal server error
  /products/{productId}/reviews:
    post:
      parameters:
        - name: productId
          in: path
          description: The ID of the product to create a review for
          required: true
          schema:
            type: integer
      security:
        - Bearer: []
      summary: "Create a new review for a product"
      description: "Creates a new review for a given product ID."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/Review'
      responses:
        201:
          description: "Review created successfully."
        400:
          description: "Bad request."
        500:
          description: "Internal server error."




  /reviews/{reviewId}:
    delete:
      security:
        - Bearer: []
      summary: "Delete a review"
      description: "Deletes a review with a given review ID."
      parameters:
        - name: "reviewId"
          in: "path"
          description: "ID of the review to delete."
          required: true
          schema:
            type: integer
      responses:
        200:
          description: "Review deleted successfully."
        404:
          description: "Review not found."
        500:
          description: "Internal server error."


  /products:
    get:
      summary: Get all products
      operationId: getProducts
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      summary: Create a new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewProduct"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Bad Request

  /products/{productId}:
    get:
      summary: Get a product by ID
      operationId: getProductById
      parameters:
        - in: path
          name: productId
          schema:
            type: integer
          required: true
          description: ID of the product to retrieve
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Not Found

  /categories/{categoryId}/products:
    get:
      summary: Get all products in a category
      operationId: getProductsByCategory
      parameters:
        - in: path
          name: categoryId
          schema:
            type: integer
          required: true
          description: ID of the category to retrieve products from
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "404":
          description: Not Found


components:
  securitySchemes:
    Bearer:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: integer
        traderId:
          type: integer
        reviews:
          type: array
          items:
            $ref: "#/components/schemas/Review"
      required:
        - id
        - name
        - description
        - price
        - categoryId
        - traderId
      example:
        id: 1
        name: "Product 1"
        description: "This is product 1"
        price: 9.99
        categoryId: 1
        trader:
          id: 1
        reviews:
          - content: "This is a great product!"
    NewProduct:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryId:
          type: integer
      required:
        - name
        - description
        - price
        - categoryId
    Address:
      type: object
      properties:
        id:
          type: integer
          example: 1
        city:
          type: string
          example: Toronto
        street:
          type: string
          example: King St
      required:
        - id
        - city
        - street
    User:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        password:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - firstName
        - lastName
        - username
        - password

    Trader:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        password:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        role:
          type: string
        storeName:
          type: string
      required:
        - firstName
        - lastName
        - username
        - password
        - role
        - storeName
    Review:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        UserId:
          type: "integer"
          format: "int64"
        ProductId:
          type: "integer"
          format: "int64"
        content:
          type: "string"
      required:
        - UserId
        - ProductId
        - content

    ReviewResponse:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        UserId:
          type: "integer"
          format: "int64"
        ProductId:
          type: "integer"
          format: "int64"
        content:
          type: "string"
      required:
        - id
        - UserId
        - ProductId
        - content
